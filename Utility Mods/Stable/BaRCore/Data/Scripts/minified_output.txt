using System;using System.Text;using System.Linq;using System.Collections.Generic;using Sandbox.ModAPI;using Sandbox.Common.ObjectBuilders;using Sandbox.Game.Entities;using Sandbox.Game.EntityComponents;using ProtoBuf;using VRage.Utils;using VRage.Game;using VRage.Game.ModAPI;using VRage.Game.ModAPI.Network;using VRage.Sync;using VRage.Network;using VRage.Game.Components;using VRage.ModAPI;using VRage.ObjectBuilders;using VRageMath;using StarCore.RepairModule.Networking.Custom;namespace StarCore.RepairModule{public enum RepairPriority{Offense,Power,Thrust,Steering,Utility,None}[MyEntityComponentDescriptor(typeof(MyObjectBuilder_Collector),false,"SELtdLargeNanobotBuildAndRepairSystem","SELtdSmallNanobotBuildAndRepairSystem")]public class RepairModule:MyGameLogicComponent,IMyEventProxy{public IMyCollector Block;private bool IsServer=MyAPIGateway.Session.IsServer;private bool IsDedicated=MyAPIGateway.Utilities.IsDedicated;private bool ClientSettingsLoaded=false;public bool IgnoreArmor{get{return ignoreArmor;}set{if(ignoreArmor!=value){ignoreArmor=value;if(IsServer){Log.Info("Processing Repair Targets on Event Trigger: IgnoreArmor");ProcessRepairTargets(Block.CubeGrid,false);}OnIgnoreArmorChanged?.Invoke(ignoreArmor);}}}public bool ignoreArmor;private event Action<bool>OnIgnoreArmorChanged;public bool PriorityOnly{get{return priorityOnly;}set{if(priorityOnly!=value){priorityOnly=value;if(IsServer){Log.Info("Processing Repair Targets on Event Trigger: PriorityOnly");ProcessRepairTargets(Block.CubeGrid,false);}OnPriorityOnlyChanged?.Invoke(priorityOnly);}}}public bool priorityOnly;private event Action<bool>OnPriorityOnlyChanged;public long SubsystemPriority{get{return GetLongFromPriority(subsystemPriority);}set{var newPriority=GetPriorityFromLong(value);if(subsystemPriority!=newPriority){subsystemPriority=newPriority;if(IsServer){Log.Info("Processing Repair Targets on Event Trigger: SubsystemPriority");ProcessRepairTargets(Block.CubeGrid,false);}OnSubsystemPriorityChanged?.Invoke(value);}}}public RepairPriority subsystemPriority=RepairPriority.None;private event Action<long>OnSubsystemPriorityChanged;float RepairAmount=4f;public readonly Guid SettingsID=new Guid("09E18094-46AE-4F55-8215-A407B49F9CAA");private int UpdateCounter=0;private const int UpdateInterval=100;private int SortCounter=0;private const int SortInterval=48;private bool NeedsSorting=false;private List<IMyCubeGrid>AssociatedGrids=new List<IMyCubeGrid>();private List<IMySlimBlock>RepairTargets=new List<IMySlimBlock>();private List<IMySlimBlock>PriorityRepairTargets=new List<IMySlimBlock>();public MySync<Vector3D,SyncDirection.FromServer>TargetPosition=null;public MySync<long,SyncDirection.FromServer>TargetBlock=null;public MySync<bool,SyncDirection.FromServer>ShowWeldEffects=null;private const string WeldParticle=MyParticleEffectsNameEnum.WelderContactPoint;private MyParticleEffect WeldParticleEmitter;private const string WeldSound="ToolLrgWeldMetal";private MyEntity3DSoundEmitter WeldSoundEmitter;public MySoundPair WeldSoundPair=>new MySoundPair(WeldSound);public override void Init(MyObjectBuilder_EntityBase objectBuilder){base.Init(objectBuilder);Block=(IMyCollector)Entity;NeedsUpdate|=MyEntityUpdateEnum.BEFORE_NEXT_FRAME;}public override void UpdateOnceBeforeFrame(){base.UpdateOnceBeforeFrame();RepairModuleControls.DoOnce(ModContext);if(Block?.CubeGrid?.Physics==null)return;MyParticlesManager.TryCreateParticleEffect(WeldParticle,ref MatrixD.Identity,ref Vector3D.Zero,uint.MaxValue,out WeldParticleEmitter);WeldSoundEmitter=new MyEntity3DSoundEmitter(null);OnIgnoreArmorChanged+=IgnoreArmor_Update;OnPriorityOnlyChanged+=PriorityOnly_Update;OnSubsystemPriorityChanged+=SubsystemPriority_Update;Block.AppendingCustomInfo+=AppendCustomInfo;if(IsServer){ProcessRepairTargets(Block.CubeGrid,true);Block.CubeGrid.OnBlockIntegrityChanged+=HandleBlocks;Block.CubeGrid.OnBlockAdded+=HandleBlocks;Block.CubeGrid.OnBlockRemoved+=HandleRemovedBlocks;if(AssociatedGrids.Any()){foreach(IMyCubeGrid grid in AssociatedGrids){grid.OnBlockIntegrityChanged+=HandleBlocks;grid.OnBlockAdded+=HandleBlocks;grid.OnBlockRemoved+=HandleRemovedBlocks;}}}NeedsUpdate|=MyEntityUpdateEnum.EACH_FRAME;NeedsUpdate|=MyEntityUpdateEnum.EACH_10TH_FRAME;NeedsUpdate|=MyEntityUpdateEnum.EACH_100TH_FRAME;}public override void UpdateAfterSimulation(){base.UpdateAfterSimulation();if(IsServer){if(MyAPIGateway.Session.GameplayFrameCounter%60==0&&Block.IsWorking){Vector3D targetBlockPosition=Vector3D.Zero;IMySlimBlock targetBlock=PriorityRepairTargets.FirstOrDefault()??(!PriorityOnly?RepairTargets.FirstOrDefault():null);if(targetBlock!=null){if(targetBlock.FatBlock!=null){TargetBlock.Value=targetBlock.FatBlock.EntityId;}else{targetBlock.ComputeWorldCenter(out targetBlockPosition);TargetPosition.Value=targetBlockPosition;}ShowWeldEffects.Value=true;RepairTarget(targetBlock);}else{ShowWeldEffects.Value=false;}}}if(IsServer){UpdateCounter++;if(Block.CubeGrid!=null){int updateCount=(int)(Block.CubeGrid.EntityId%UpdateInterval);if(UpdateCounter%UpdateInterval==updateCount){ProcessRepairTargets(Block.CubeGrid,false);}}if(UpdateCounter>=int.MaxValue-UpdateInterval){UpdateCounter=0;}}if(MyAPIGateway.Session.GameplayFrameCounter%60==0&&MyAPIGateway.Gui.GetCurrentScreen==MyTerminalPageEnum.ControlPanel){Block.RefreshCustomInfo();Block.SetDetailedInfoDirty();}if(ShowWeldEffects.Value&&(TargetPosition!=null||TargetBlock!=null)){SpawnWeldEffects(TargetPosition.Value);}else{ResetWeldEffects();}}public override void UpdateAfterSimulation10(){base.UpdateAfterSimulation10();if(IsServer){if(SortCounter>0&&!NeedsSorting){SortCounter--;return;}if(SortCounter==0||NeedsSorting){RepairTargets=RepairTargets.OrderBy(block=>block.Integrity).ToList();PriorityRepairTargets=PriorityRepairTargets.OrderBy(block=>block.Integrity).ToList();SortCounter=SortInterval;NeedsSorting=false;}}}public override void UpdateAfterSimulation100(){base.UpdateAfterSimulation100();if(IsDedicated){NeedsUpdate&=~MyEntityUpdateEnum.EACH_100TH_FRAME;return;}if(!LoadSettings()){IgnoreArmor=true;PriorityOnly=false;SubsystemPriority=0;}ClientSettingsLoaded=true;NeedsUpdate&=~MyEntityUpdateEnum.EACH_100TH_FRAME;return;}public override void Close(){base.Close();if(Block==null)return;if(IsServer){Block.CubeGrid.OnBlockIntegrityChanged-=HandleBlocks;Block.CubeGrid.OnBlockAdded-=HandleBlocks;Block.CubeGrid.OnBlockRemoved-=HandleRemovedBlocks;if(AssociatedGrids.Any()){foreach(IMyCubeGrid grid in AssociatedGrids){grid.OnBlockIntegrityChanged-=HandleBlocks;grid.OnBlockAdded-=HandleBlocks;grid.OnBlockRemoved-=HandleRemovedBlocks;}}}AssociatedGrids.Clear();RepairTargets.Clear();PriorityRepairTargets.Clear();if(WeldParticleEmitter!=null){WeldParticleEmitter.Close();WeldParticleEmitter=null;}if(WeldSoundEmitter!=null){WeldSoundEmitter?.Cleanup();WeldSoundEmitter=null;}Block=null;}public override bool IsSerialized(){Log.Info($"IsSerialized called for {Block.EntityId}");try{SaveSettings();}catch(Exception e){Log.Error(e);}return base.IsSerialized();}public void HandleBlocks(IMySlimBlock block){if(IgnoreArmor&&(block.FatBlock==null||block.ToString().Contains("MyCubeBlock")||block.FatBlock.BlockDefinition.SubtypeId.Contains("AQD_LA")||block.FatBlock.BlockDefinition.SubtypeId.Contains("AQD_HA"))){HandleRemovedBlocks(block);return;}List<IMySlimBlock>newTargetList=IsPriority(block)?PriorityRepairTargets:RepairTargets;List<IMySlimBlock>oldTargetList=newTargetList==PriorityRepairTargets?RepairTargets:PriorityRepairTargets;if(oldTargetList.Contains(block)){oldTargetList.Remove(block);}if(block.Integrity!=block.MaxIntegrity){if(!newTargetList.Contains(block)){newTargetList.Add(block);}}}public void HandleRemovedBlocks(IMySlimBlock block){if(RepairTargets.Contains(block)){RepairTargets.Remove(block);}if(PriorityRepairTargets.Contains(block)){PriorityRepairTargets.Remove(block);}}private void IgnoreArmor_Update(bool _bool){SaveSettings();IgnoreArmorPacket.UpdateIgnoreArmor(Block.EntityId);}private void PriorityOnly_Update(bool _bool){SaveSettings();PriorityOnlyPacket.UpdatePriorityOnly(Block.EntityId);}private void SubsystemPriority_Update(long _long){SaveSettings();SubsystemPriorityPacket.UpdateSubsystemPriority(Block.EntityId);}bool LoadSettings(){if(Block.Storage==null){Log.Info($"LoadSettings: Block storage is null for {Block.EntityId}");return false;}string rawData;if(!Block.Storage.TryGetValue(SettingsID,out rawData)){Log.Info($"LoadSettings: No data found for {Block.EntityId}");return false;}try{var loadedSettings=MyAPIGateway.Utilities.SerializeFromBinary<RepairSettings>(Convert.FromBase64String(rawData));if(loadedSettings!=null){Log.Info($"LoadSettings: Successfully loaded settings for {Block.EntityId}");Log.Info($"Loaded values: IgnoreArmor={loadedSettings.Stored_IgnoreArmor}, PriorityOnly={loadedSettings.Stored_PriorityOnly}, SubsystemPriority={loadedSettings.Stored_SubsystemPriority}");IgnoreArmor=loadedSettings.Stored_IgnoreArmor;PriorityOnly=loadedSettings.Stored_PriorityOnly;SubsystemPriority=loadedSettings.Stored_SubsystemPriority;Log.Info($"After assignment: IgnoreArmor={IgnoreArmor}, PriorityOnly={PriorityOnly}, SubsystemPriority={SubsystemPriority}");return true;}}catch(Exception e){Log.Error($"Error loading settings for {Block.EntityId}!\n{e}");}return false;}void SaveSettings(){if(Block==null){Log.Info("SaveSettings called but Block is null.");return;}try{if(MyAPIGateway.Utilities==null)throw new NullReferenceException($"MyAPIGateway.Utilities == null; entId={Entity?.EntityId};");if(Block.Storage==null){Log.Info($"Creating new storage for {Block.EntityId}");Block.Storage=new MyModStorageComponent();}var settings=new RepairSettings{Stored_IgnoreArmor=IgnoreArmor,Stored_PriorityOnly=PriorityOnly,Stored_SubsystemPriority=SubsystemPriority};string serializedData=Convert.ToBase64String(MyAPIGateway.Utilities.SerializeToBinary(settings));Block.Storage.SetValue(SettingsID,serializedData);Log.Info($"SaveSettings: Successfully saved settings for {Block.EntityId}");Log.Info($"Saved values: IgnoreArmor={IgnoreArmor}, PriorityOnly={PriorityOnly}, SubsystemPriority={SubsystemPriority}");}catch(Exception e){Log.Error($"Error saving settings for {Block.EntityId}!\n{e}");}}public static T GetLogic<T>(long entityId)where T:MyGameLogicComponent{IMyEntity targetEntity=MyAPIGateway.Entities.GetEntityById(entityId);if(targetEntity==null){Log.Info("GetLogic failed: Entity not found. Entity ID: "+entityId);return null;}IMyTerminalBlock targetBlock=targetEntity as IMyTerminalBlock;if(targetBlock==null){Log.Info("GetLogic failed: Target entity is not a terminal block. Entity ID: "+entityId);return null;}var logic=targetBlock.GameLogic?.GetAs<T>();if(logic==null){Log.Info("GetLogic failed: Logic component not found. Entity ID: "+entityId);}return logic;}private void AppendCustomInfo(IMyTerminalBlock block,StringBuilder sb){try{string priorityListAsString=ProcessTargetsToString(PriorityRepairTargets);string listAsString=ProcessTargetsToString(RepairTargets);sb.Append("Priority Targets: ").Append("\n").Append(priorityListAsString).Append("\n\n").Append("Regular Targets: ").Append("\n").Append(listAsString);}catch(Exception e){MyLog.Default.WriteLine(e);}}private string ProcessTargetsToString(List<IMySlimBlock>list){return string.Join(Environment.NewLine,list.Select(listItem=>{string listItemString=listItem.ToString();int lastBraceIndex=listItemString.LastIndexOf("}");int firstBraceIndex=listItemString.IndexOf("{");if(lastBraceIndex!=-1){string afterLastBrace=listItemString.Substring(lastBraceIndex+1);if(!string.IsNullOrWhiteSpace(afterLastBrace)){return afterLastBrace;}}if(firstBraceIndex!=-1){string beforeFirstBrace=listItemString.Substring(0,firstBraceIndex).Trim();if(beforeFirstBrace.Contains("MyCubeBlock")&&listItem.FatBlock!=null){string modelName=GetModelNameFromFatBlock(listItem.FatBlock);return modelName;}return beforeFirstBrace;}return" "+listItemString;}));}private string GetModelNameFromFatBlock(IMyEntity fatBlock){string itemModelName=fatBlock.Model.AssetName.ToString();int lastBackslashIndex=itemModelName.LastIndexOf("\\");if(lastBackslashIndex!=-1){string afterLastBackslash=itemModelName.Substring(lastBackslashIndex+1);int firstPeriodIndex=afterLastBackslash.IndexOf("_");if(firstPeriodIndex!=-1){return" "+afterLastBackslash.Substring(0,firstPeriodIndex).Trim();}return" "+afterLastBackslash;}return" "+itemModelName;}public RepairPriority GetPriorityFromLong(long priority){switch(priority){case 0:return RepairPriority.None;case 1:return RepairPriority.Offense;case 2:return RepairPriority.Power;case 3:return RepairPriority.Thrust;case 4:return RepairPriority.Steering;case 5:return RepairPriority.Utility;default:return RepairPriority.None;}}public long GetLongFromPriority(RepairPriority priority){switch(priority){case RepairPriority.None:return 0;case RepairPriority.Offense:return 1;case RepairPriority.Power:return 2;case RepairPriority.Thrust:return 3;case RepairPriority.Steering:return 4;case RepairPriority.Utility:return 5;default:return 0;}}private bool IsPriority(IMySlimBlock block){if(block.FatBlock==null){return false;}switch(subsystemPriority){case RepairPriority.Offense:return block.FatBlock is IMyConveyorSorter||block.FatBlock is IMyLargeTurretBase||block.FatBlock is IMySmallMissileLauncher||block.FatBlock is IMySmallMissileLauncherReload||block.FatBlock is IMySmallGatlingGun;case RepairPriority.Power:return block.FatBlock is IMyPowerProducer;case RepairPriority.Thrust:return block.FatBlock is IMyThrust;case RepairPriority.Steering:return block.FatBlock is IMyGyro||block.FatBlock is IMyCockpit;case RepairPriority.Utility:return block.FatBlock is IMyGasTank||block.FatBlock is IMyConveyor||block.FatBlock is IMyConveyorTube;default:return false;}}private void SpawnWeldEffects(Vector3D position){if(WeldParticleEmitter==null)return;if(TargetBlock.Value!=0){IMyEntity entity;if(MyAPIGateway.Entities.TryGetEntityById(TargetBlock.Value,out entity)){IMyCubeBlock targetBlock=entity as IMyCubeBlock;if(targetBlock!=null){WeldParticleEmitter.WorldMatrix=targetBlock.WorldMatrix;return;}else return;}}WeldParticleEmitter.WorldMatrix=MatrixD.Identity;WeldParticleEmitter?.SetTranslation(ref position);WeldSoundEmitter?.SetPosition(position);WeldSoundEmitter?.PlaySingleSound(WeldSoundPair,true);}private void ResetWeldEffects(){if(WeldParticleEmitter==null)return;WeldParticleEmitter.WorldMatrix=MatrixD.Identity;WeldParticleEmitter?.SetTranslation(ref Vector3D.Zero);WeldSoundEmitter?.SetPosition(Vector3D.Zero);WeldSoundEmitter?.StopSound(true);}public void ProcessRepairTargets(IMyCubeGrid grid,bool init){var gridGroup=grid.GetGridGroup(GridLinkTypeEnum.Mechanical);List<IMyCubeGrid>gridsList=new List<IMyCubeGrid>();if(gridGroup!=null){gridGroup.GetGrids(gridsList);if(init){AssociatedGrids=gridsList;}foreach(IMyCubeGrid groupGrid in gridsList){var tempBlockList=new List<IMySlimBlock>();groupGrid.GetBlocks(tempBlockList);foreach(var block in tempBlockList){HandleBlocks(block);}tempBlockList.Clear();}}else{var tempBlockList=new List<IMySlimBlock>();grid.GetBlocks(tempBlockList);foreach(var block in tempBlockList){HandleBlocks(block);}tempBlockList.Clear();}}private void RepairTarget(IMySlimBlock block){if(block==null||block.CubeGrid.Physics==null)return;if(!block.IsFullIntegrity||block.HasDeformation){block.IncreaseMountLevel(RepairAmount*MyAPIGateway.Session.WelderSpeedMultiplier,block.OwnerId,null,1);}else{RepairTargets.Remove(block);PriorityRepairTargets.Remove(block);TargetPosition.Value=Vector3D.Zero;ShowWeldEffects.Value=false;NeedsSorting=true;}if(block.CubeGrid.GetCubeBlock(block.Position)==null){RepairTargets.Remove(block);PriorityRepairTargets.Remove(block);NeedsSorting=true;}}}[ProtoContract]public class RepairSettings{[ProtoMember(41)]public bool Stored_IgnoreArmor{get;set;}[ProtoMember(42)]public bool Stored_PriorityOnly{get;set;}[ProtoMember(43)]public long Stored_SubsystemPriority{get;set;}}}﻿using System;using System.Collections.Generic;using System.IO;using System.Text;using ParallelTasks;using Sandbox.ModAPI;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.Utils;namespace StarCore.RepairModule{[MySessionComponentDescriptor(MyUpdateOrder.NoUpdate,priority:int.MaxValue)]public class Log:MySessionComponentBase{private static Log instance;private static Handler handler;private static bool unloaded=false;public static readonly string FILE=GenerateTimestampedFileName();private const int DEFAULT_TIME_INFO=3000;private const int DEFAULT_TIME_ERROR=10000;private static string GenerateTimestampedFileName(){string timestamp=DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");return$"[{timestamp}]-RepairModule.log";}public const string PRINT_ERROR="<err>";public const string PRINT_MSG="<msg>";public override void LoadData(){instance=this;EnsureHandlerCreated();handler.Init(this);}protected override void UnloadData(){instance=null;if(handler!=null&&handler.AutoClose){Unload();}}private void Unload(){try{if(unloaded)return;unloaded=true;handler?.Close();handler=null;}catch(Exception e){MyLog.Default.WriteLine($"Error in {ModContext.ModName} ({ModContext.ModId}): {e.Message}\n{e.StackTrace}");throw new ModCrashedException(e,ModContext);}}private static void EnsureHandlerCreated(){if(unloaded)throw new Exception("Digi.Log accessed after it was unloaded!");if(handler==null)handler=new Handler();}public static void Close(){instance?.Unload();}public static bool AutoClose{get{EnsureHandlerCreated();return handler.AutoClose;}set{EnsureHandlerCreated();handler.AutoClose=value;}}public static string ModName{get{EnsureHandlerCreated();return handler.ModName;}set{EnsureHandlerCreated();handler.ModName=value;}}public static ulong WorkshopId=>handler?.WorkshopId??0;public static void IncreaseIndent(){EnsureHandlerCreated();handler.IncreaseIndent();}public static void DecreaseIndent(){EnsureHandlerCreated();handler.DecreaseIndent();}public static void ResetIndent(){EnsureHandlerCreated();handler.ResetIndent();}public static void Error(Exception exception,string printText=PRINT_ERROR,int printTimeMs=DEFAULT_TIME_ERROR){EnsureHandlerCreated();handler.Error(exception.ToString(),printText,printTimeMs);}public static void Error(string message,string printText=PRINT_ERROR,int printTimeMs=DEFAULT_TIME_ERROR){EnsureHandlerCreated();handler.Error(message,printText,printTimeMs);}public static void Info(string message,string printText=null,int printTimeMs=DEFAULT_TIME_INFO){EnsureHandlerCreated();handler.Info(message,printText,printTimeMs);}public static bool TaskHasErrors(ParallelTasks.Task task,string taskName){EnsureHandlerCreated();if(task.Exceptions!=null&&task.Exceptions.Length>0){foreach(var e in task.Exceptions){Error($"Error in {taskName} thread!\n{e}");}return true;}return false;}private class Handler{private Log sessionComp;private string modName=string.Empty;private TextWriter writer;private int indent=0;private string errorPrintText;private IMyHudNotification notifyInfo;private IMyHudNotification notifyError;private StringBuilder sb=new StringBuilder(64);private List<string>preInitMessages;public bool AutoClose{get;set;}=true;public ulong WorkshopId{get;private set;}=0;public string ModName{get{return modName;}set{modName=value;ComputeErrorPrintText();}}public Handler(){}public void Init(Log sessionComp){if(writer!=null)return;if(MyAPIGateway.Utilities==null){Error("MyAPIGateway.Utilities is NULL !");return;}this.sessionComp=sessionComp;if(string.IsNullOrWhiteSpace(ModName))ModName=sessionComp.ModContext.ModName;WorkshopId=GetWorkshopID(sessionComp.ModContext.ModId);writer=MyAPIGateway.Utilities.WriteFileInLocalStorage(FILE,typeof(Log));if(preInitMessages!=null){string warning=$"{modName} WARNING: there are log messages before the mod initialized!";Info($"--- pre-init messages ---");foreach(var msg in preInitMessages){Info(msg,warning);}Info("--- end pre-init messages ---");preInitMessages=null;}sb.Clear();sb.Append("Initialized");sb.Append("\nGameMode=").Append(MyAPIGateway.Session.SessionSettings.GameMode);sb.Append("\nOnlineMode=").Append(MyAPIGateway.Session.SessionSettings.OnlineMode);sb.Append("\nServer=").Append(MyAPIGateway.Session.IsServer);sb.Append("\nDS=").Append(MyAPIGateway.Utilities.IsDedicated);sb.Append("\nDefined=");
#if STABLE
sb.Append("STABLE, ");
#endif
#if UNOFFICIAL
sb.Append("UNOFFICIAL, ");
#endif
#if DEBUG
sb.Append("DEBUG, ");
#endif
#if BRANCH_STABLE
sb.Append("BRANCH_STABLE, ");
#endif
#if BRANCH_DEVELOP
sb.Append("BRANCH_DEVELOP, ");
#endif
#if BRANCH_UNKNOWN
sb.Append("BRANCH_UNKNOWN, ");
#endif
Info(sb.ToString());sb.Clear();}public void Close(){if(writer!=null){Info("Unloaded.");writer.Flush();writer.Close();writer=null;}}private void ComputeErrorPrintText(){errorPrintText=$"[ {modName} ERROR, report contents of: %AppData%/SpaceEngineers/Storage/{MyAPIGateway.Utilities.GamePaths.ModScopeName}/{FILE} ]";}public void IncreaseIndent(){indent++;}public void DecreaseIndent(){if(indent>0)indent--;}public void ResetIndent(){indent=0;}public void Error(string message,string printText=PRINT_ERROR,int printTime=DEFAULT_TIME_ERROR){MyLog.Default.WriteLineAndConsole(modName+" error/exception: "+message);LogMessage(message,"ERROR: ");if(printText!=null)ShowHudMessage(ref notifyError,message,printText,printTime,MyFontEnum.Red);}public void Info(string message,string printText=null,int printTime=DEFAULT_TIME_INFO){LogMessage(message);if(printText!=null)ShowHudMessage(ref notifyInfo,message,printText,printTime,MyFontEnum.White);}private void ShowHudMessage(ref IMyHudNotification notify,string message,string printText,int printTime,string font){if(printText==null)return;try{if(MyAPIGateway.Utilities!=null&&!MyAPIGateway.Utilities.IsDedicated){if(printText==PRINT_ERROR)printText=errorPrintText;else if(printText==PRINT_MSG)printText=$"[ {modName} ERROR: {message} ]";if(notify==null){notify=MyAPIGateway.Utilities.CreateNotification(printText,printTime,font);}else{notify.Text=printText;notify.AliveTime=printTime;notify.ResetAliveTime();}notify.Show();}}catch(Exception e){Info("ERROR: Could not send notification to local client: "+e);MyLog.Default.WriteLineAndConsole(modName+" logger error/exception: Could not send notification to local client: "+e);}}private void LogMessage(string message,string prefix=null){try{sb.Clear();sb.Append(DateTime.Now.ToString("[HH:mm:ss] "));if(writer==null)sb.Append("(PRE-INIT) ");for(int i=0;i<indent;i++)sb.Append(' ',4);if(prefix!=null)sb.Append(prefix);sb.Append(message);if(writer==null){if(preInitMessages==null)preInitMessages=new List<string>();preInitMessages.Add(sb.ToString());}else{writer.WriteLine(sb);writer.Flush();}sb.Clear();}catch(Exception e){MyLog.Default.WriteLineAndConsole($"{modName} had an error while logging message = '{message}'\nLogger error: {e.Message}\n{e.StackTrace}");}}private ulong GetWorkshopID(string modId){foreach(var mod in MyAPIGateway.Session.Mods){if(mod.Name==modId)return mod.PublishedFileId;}return 0;}}}}﻿using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Sandbox.ModAPI;using VRage.Game.Components;using VRage.ModAPI;using StarCore.RepairModule.Networking;namespace StarCore.RepairModule.Session{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]internal class RepairModuleSession:MySessionComponentBase{public static HeartNetwork Networking=new HeartNetwork();public override void LoadData(){Networking.Init("RepairModuleNetwork");}protected override void UnloadData(){Networking.Close();}}}﻿using System;using System.Collections.Generic;using System.IO;using System.Text;using Sandbox.Game.Localization;using Sandbox.ModAPI;using Sandbox.ModAPI.Interfaces.Terminal;using VRage.Game;using VRage.Game.Components;using VRage.Game.ModAPI;using VRage.ModAPI;using VRage.Utils;using VRageMath;namespace StarCore.RepairModule{public static class RepairModuleControls{const string IdPrefix="RepairModule_";static bool Done=false;public static void DoOnce(IMyModContext context){try{if(Done)return;Done=true;CreateControls();CreateActions(context);}catch(Exception e){MyLog.Default.WriteLine($"[RepairModule] {e}");}}static bool IsVisible(IMyTerminalBlock b){return b?.GameLogic?.GetAs<RepairModule>()!=null;}static void CreateControls(){var PriorityDropdown=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlCombobox,IMyCollector>(IdPrefix+"PriorityDropdown");PriorityDropdown.Title=MyStringId.GetOrCompute("Repair Prioity");PriorityDropdown.Tooltip=MyStringId.GetOrCompute("Select a Subsystem Group to Prioritize");PriorityDropdown.SupportsMultipleBlocks=true;PriorityDropdown.Visible=IsVisible;PriorityDropdown.Getter=(b)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){return logic.SubsystemPriority;}else{return 0;}};PriorityDropdown.Setter=SetPriority_Control;PriorityDropdown.ComboBoxContent=(list)=>{list.Add(new MyTerminalControlComboBoxItem(){Key=0,Value=MyStringId.GetOrCompute("Any")});list.Add(new MyTerminalControlComboBoxItem(){Key=1,Value=MyStringId.GetOrCompute("Offense")});list.Add(new MyTerminalControlComboBoxItem(){Key=2,Value=MyStringId.GetOrCompute("Power")});list.Add(new MyTerminalControlComboBoxItem(){Key=3,Value=MyStringId.GetOrCompute("Thrust")});list.Add(new MyTerminalControlComboBoxItem(){Key=4,Value=MyStringId.GetOrCompute("Steering")});list.Add(new MyTerminalControlComboBoxItem(){Key=5,Value=MyStringId.GetOrCompute("Utility")});};MyAPIGateway.TerminalControls.AddControl<IMyCollector>(PriorityDropdown);var PriorityCheckbox=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlCheckbox,IMyCollector>(IdPrefix+"PriorityCheckbox");PriorityCheckbox.Title=MyStringId.GetOrCompute("Priority Only");PriorityCheckbox.Tooltip=MyStringId.GetOrCompute("Toggle - Only Repair Priority Blocks");PriorityCheckbox.SupportsMultipleBlocks=true;PriorityCheckbox.Visible=IsVisible;PriorityCheckbox.Getter=(b)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){return logic.PriorityOnly;}else{return false;}};PriorityCheckbox.Setter=SetPriorityToggle_Action;MyAPIGateway.TerminalControls.AddControl<IMyCollector>(PriorityCheckbox);var IgnoreArmorCheckbox=MyAPIGateway.TerminalControls.CreateControl<IMyTerminalControlCheckbox,IMyCollector>(IdPrefix+"IgnoreArmorCheckbox");IgnoreArmorCheckbox.Title=MyStringId.GetOrCompute("Ignore Armor");IgnoreArmorCheckbox.Tooltip=MyStringId.GetOrCompute("Toggle - Only Repair Non-Armor Blocks");IgnoreArmorCheckbox.SupportsMultipleBlocks=true;IgnoreArmorCheckbox.Visible=IsVisible;IgnoreArmorCheckbox.Getter=(b)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){return logic.IgnoreArmor;}else{return false;}};IgnoreArmorCheckbox.Setter=SetIgnoreArmorToggle_Action;MyAPIGateway.TerminalControls.AddControl<IMyCollector>(IgnoreArmorCheckbox);}static void CreateActions(IMyModContext context){var PriorityDropdownAction=MyAPIGateway.TerminalControls.CreateAction<IMyCollector>(IdPrefix+"PriorityDropdownAction");PriorityDropdownAction.Name=new StringBuilder("Cycle Priority");PriorityDropdownAction.ValidForGroups=true;PriorityDropdownAction.Icon=@"Textures\GUI\Icons\Actions\SubsystemTargeting_Cycle.dds";PriorityDropdownAction.Action=SetPriority_Action;PriorityDropdownAction.Writer=WritePriority_Action;PriorityDropdownAction.InvalidToolbarTypes=new List<MyToolbarType>(){MyToolbarType.ButtonPanel,MyToolbarType.Character,MyToolbarType.Seat};PriorityDropdownAction.Enabled=IsVisible;MyAPIGateway.TerminalControls.AddAction<IMyCollector>(PriorityDropdownAction);var PriorityCheckboxAction=MyAPIGateway.TerminalControls.CreateAction<IMyCollector>(IdPrefix+"PriorityCheckboxAction");PriorityCheckboxAction.Name=new StringBuilder("Toggle Priority Only");PriorityCheckboxAction.ValidForGroups=true;PriorityCheckboxAction.Icon=@"Textures\GUI\Icons\Actions\StationToggle.dds";PriorityCheckboxAction.Action=(b)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){logic.PriorityOnly=!logic.PriorityOnly;}};PriorityCheckboxAction.Writer=(b,sb)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){string boolState=logic.PriorityOnly?"True":"False";sb.Append(boolState);}};PriorityCheckboxAction.InvalidToolbarTypes=new List<MyToolbarType>(){MyToolbarType.ButtonPanel,MyToolbarType.Character,MyToolbarType.Seat};PriorityCheckboxAction.Enabled=IsVisible;MyAPIGateway.TerminalControls.AddAction<IMyCollector>(PriorityCheckboxAction);var IgnoreArmorCheckboxAction=MyAPIGateway.TerminalControls.CreateAction<IMyCollector>(IdPrefix+"IgnoreArmorCheckboxAction");IgnoreArmorCheckboxAction.Name=new StringBuilder("Toggle Ignore Armor");IgnoreArmorCheckboxAction.ValidForGroups=true;IgnoreArmorCheckboxAction.Icon=@"Textures\GUI\Icons\Actions\StationToggle.dds";IgnoreArmorCheckboxAction.Action=(b)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){logic.IgnoreArmor=!logic.IgnoreArmor;}};IgnoreArmorCheckboxAction.Writer=(b,sb)=>{var logic=b?.GameLogic?.GetAs<RepairModule>();if(logic!=null){string boolState=logic.IgnoreArmor?"True":"False";sb.Append(boolState);}};IgnoreArmorCheckboxAction.InvalidToolbarTypes=new List<MyToolbarType>(){MyToolbarType.ButtonPanel,MyToolbarType.Character,MyToolbarType.Seat};IgnoreArmorCheckboxAction.Enabled=IsVisible;MyAPIGateway.TerminalControls.AddAction<IMyCollector>(IgnoreArmorCheckboxAction);}static RepairModule GetLogic(IMyTerminalBlock block)=>block?.GameLogic?.GetAs<RepairModule>();static void SetPriority_Control(IMyTerminalBlock block,long key){var logic=GetLogic(block);if(logic!=null){logic.SubsystemPriority=key;}}static void SetPriority_Action(IMyTerminalBlock block){var logic=GetLogic(block);if(logic!=null){if(logic.SubsystemPriority<5){logic.SubsystemPriority++;}else{logic.SubsystemPriority=0;}}}static void WritePriority_Action(IMyTerminalBlock block,StringBuilder sb){var logic=GetLogic(block);if(logic!=null){switch(logic.SubsystemPriority){case 0:sb.Append("Any");break;case 1:sb.Append("Offense");break;case 2:sb.Append("Power");break;case 3:sb.Append("Thrust");break;case 4:sb.Append("Steering");break;case 5:sb.Append("Utility");break;}}}static void SetPriorityToggle_Action(IMyTerminalBlock block,bool v){var logic=GetLogic(block);if(logic!=null){logic.PriorityOnly=v;}}static void SetIgnoreArmorToggle_Action(IMyTerminalBlock block,bool v){var logic=GetLogic(block);if(logic!=null){logic.IgnoreArmor=v;}}}}﻿namespace StarCore.RepairModule{public abstract class ComponentBase{public string ComponentId;public virtual void Init(string id){ComponentId=id;}public abstract void Close();public abstract void UpdateTick();}}﻿using System;using System.Collections.Generic;using System.Linq;using Sandbox.ModAPI;using VRage.Game.ModAPI;namespace StarCore.RepairModule.Networking{public class HeartNetwork:ComponentBase{public static HeartNetwork I;private int _networkLoadUpdate;public int NetworkLoadTicks=240;private readonly List<IMyPlayer>TempPlayers=new List<IMyPlayer>();public Dictionary<Type,int>TypeNetworkLoad=new Dictionary<Type,int>();public ushort NetworkId{get;private set;}public int TotalNetworkLoad{get;private set;}public override void Init(string id){base.Init(id);I=this;NetworkId=20871;MyAPIGateway.Multiplayer.RegisterSecureMessageHandler(NetworkId,ReceivedPacket);foreach(var type in PacketBase.PacketTypes)TypeNetworkLoad.Add(type,0);}public override void Close(){MyAPIGateway.Multiplayer.UnregisterSecureMessageHandler(NetworkId,ReceivedPacket);I=null;}private int ctr=0;public override void UpdateTick(){_networkLoadUpdate--;if(_networkLoadUpdate<=0){_networkLoadUpdate=NetworkLoadTicks;TotalNetworkLoad=0;foreach(var networkLoadArray in TypeNetworkLoad.Keys.ToArray()){TotalNetworkLoad+=TypeNetworkLoad[networkLoadArray];TypeNetworkLoad[networkLoadArray]=0;}TotalNetworkLoad/=NetworkLoadTicks/60;ctr++;if(ctr%4==0){Log.Info($"Network Load: {TotalNetworkLoad}");}}}private void ReceivedPacket(ushort channelId,byte[]serialized,ulong senderSteamId,bool isSenderServer){try{var packet=MyAPIGateway.Utilities.SerializeFromBinary<PacketBase>(serialized);TypeNetworkLoad[packet.GetType()]+=serialized.Length;HandlePacket(packet,senderSteamId);}catch(Exception ex){Log.Error(ex,"[RepairModule] Error in HeatNetwork Sync! See Log for more Details!");}}private void HandlePacket(PacketBase packet,ulong senderSteamId){packet.Received(senderSteamId);}public KeyValuePair<Type,int>HighestNetworkLoad(){Type highest=null;foreach(var networkLoadArray in TypeNetworkLoad)if(highest==null||networkLoadArray.Value>TypeNetworkLoad[highest])highest=networkLoadArray.Key;return new KeyValuePair<Type,int>(highest,TypeNetworkLoad[highest]);}public void SendToPlayer(PacketBase packet,ulong playerSteamId,byte[]serialized=null){RelayToClient(packet,playerSteamId,MyAPIGateway.Session?.Player?.SteamUserId??0,serialized);}public void SendToEveryone(PacketBase packet,byte[]serialized=null){RelayToClients(packet,MyAPIGateway.Session?.Player?.SteamUserId??0,serialized);}public void SendToServer(PacketBase packet,byte[]serialized=null){RelayToServer(packet,MyAPIGateway.Session?.Player?.SteamUserId??0,serialized);}private void RelayToClients(PacketBase packet,ulong senderSteamId=0,byte[]serialized=null){if(!MyAPIGateway.Multiplayer.IsServer)return;TempPlayers.Clear();MyAPIGateway.Players.GetPlayers(TempPlayers);foreach(var p in TempPlayers){if(p.SteamUserId==MyAPIGateway.Multiplayer.ServerId||p.SteamUserId==senderSteamId)continue;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageTo(NetworkId,serialized,p.SteamUserId);}TempPlayers.Clear();}private void RelayToClient(PacketBase packet,ulong playerSteamId,ulong senderSteamId,byte[]serialized=null){if(playerSteamId==MyAPIGateway.Multiplayer.ServerId||playerSteamId==senderSteamId)return;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageTo(NetworkId,serialized,playerSteamId);}private void RelayToServer(PacketBase packet,ulong senderSteamId=0,byte[]serialized=null){if(senderSteamId==MyAPIGateway.Multiplayer.ServerId)return;if(serialized==null)serialized=MyAPIGateway.Utilities.SerializeToBinary(packet);MyAPIGateway.Multiplayer.SendMessageToServer(NetworkId,serialized);}}}﻿using System;using ProtoBuf;using StarCore.RepairModule.Networking.Custom;namespace StarCore.RepairModule.Networking{[ProtoContract(UseProtoMembersOnly=true)][ProtoInclude(1,typeof(IgnoreArmorPacket))][ProtoInclude(2,typeof(PriorityOnlyPacket))][ProtoInclude(3,typeof(SubsystemPriorityPacket))][ProtoInclude(4,typeof(SyncRequestPacket))]public abstract class PacketBase{public static readonly Type[]PacketTypes={typeof(PacketBase),typeof(IgnoreArmorPacket),typeof(PriorityOnlyPacket),typeof(SubsystemPriorityPacket),typeof(SyncRequestPacket),};public abstract void Received(ulong SenderSteamId);}}﻿using System;using ProtoBuf;using Sandbox.ModAPI;namespace StarCore.RepairModule.Networking.Custom{[ProtoContract]public class IgnoreArmorPacket:PacketBase{[ProtoMember(6)]private bool ignoreArmor;[ProtoMember(7)]private long entityId;public override void Received(ulong SenderSteamId){Log.Info("Recieved Terminal Controls Update Request. Contents:\n    IgnoreArmor: "+ignoreArmor);var repairModule=RepairModule.GetLogic<RepairModule>(entityId);if(repairModule!=null){repairModule.ignoreArmor=ignoreArmor;if(MyAPIGateway.Session.IsServer)HeartNetwork.I.SendToEveryone(this);}else{Log.Info("Received method failed: RepairModule is null. Entity ID: "+entityId);}}public static void UpdateIgnoreArmor(long entityID){try{IgnoreArmorPacket packet=new IgnoreArmorPacket{ignoreArmor=RepairModule.GetLogic<RepairModule>(entityID).IgnoreArmor,entityId=entityID,};Log.Info("Sending Terminal Controls Update. Contents:\n    IgnoreArmor: "+packet.ignoreArmor);if(MyAPIGateway.Session.IsServer)HeartNetwork.I.SendToEveryone(packet);else HeartNetwork.I.SendToServer(packet);}catch(Exception ex){Log.Error(ex);}}}}﻿using System;using ProtoBuf;using Sandbox.ModAPI;namespace StarCore.RepairModule.Networking.Custom{[ProtoContract]public class PriorityOnlyPacket:PacketBase{[ProtoMember(8)]private bool priorityOnly;[ProtoMember(9)]private long entityId;public override void Received(ulong SenderSteamId){Log.Info("Recieved Terminal Controls Update Request. Contents:\n    PriorityOnly: "+priorityOnly);var repairModule=RepairModule.GetLogic<RepairModule>(entityId);if(repairModule!=null){repairModule.priorityOnly=priorityOnly;if(MyAPIGateway.Session.IsServer){HeartNetwork.I.SendToEveryone(this);}}else{Log.Info("Received method failed: RepairModule is null. Entity ID: "+entityId);}}public static void UpdatePriorityOnly(long entityID){try{PriorityOnlyPacket packet=new PriorityOnlyPacket{priorityOnly=RepairModule.GetLogic<RepairModule>(entityID).PriorityOnly,entityId=entityID,};Log.Info("Sending Terminal Controls Update. Contents:\n    SubsystemPriority: "+packet.priorityOnly);if(MyAPIGateway.Session.IsServer)HeartNetwork.I.SendToEveryone(packet);else HeartNetwork.I.SendToServer(packet);}catch(Exception ex){Log.Error(ex);}}}}﻿using System;using ProtoBuf;using Sandbox.ModAPI;namespace StarCore.RepairModule.Networking.Custom{[ProtoContract]public class SubsystemPriorityPacket:PacketBase{[ProtoMember(10)]private long subsystemPriority;[ProtoMember(11)]private long entityId;public override void Received(ulong SenderSteamId){Log.Info("Recieved Terminal Controls Update Request. Contents:\n    SubsystemPriority: "+subsystemPriority);var repairModule=RepairModule.GetLogic<RepairModule>(entityId);if(repairModule!=null){repairModule.subsystemPriority=repairModule.GetPriorityFromLong(subsystemPriority);if(MyAPIGateway.Session.IsServer){HeartNetwork.I.SendToEveryone(this);}}else{Log.Info("Received method failed: RepairModule is null. Entity ID: "+entityId);}}public static void UpdateSubsystemPriority(long entityID){try{SubsystemPriorityPacket packet=new SubsystemPriorityPacket{subsystemPriority=RepairModule.GetLogic<RepairModule>(entityID).SubsystemPriority,entityId=entityID,};Log.Info("Sending Terminal Controls Update. Contents:\n    SubsystemPriority: "+packet.subsystemPriority);if(MyAPIGateway.Session.IsServer)HeartNetwork.I.SendToEveryone(packet);else HeartNetwork.I.SendToServer(packet);}catch(Exception ex){Log.Error(ex);}}}}﻿using System;using ProtoBuf;namespace StarCore.RepairModule.Networking.Custom{[ProtoContract]public class SyncRequestPacket:PacketBase{[ProtoMember(12)]private long entityId;public override void Received(ulong SenderSteamId){Log.Info("Recived Sync Request From: "+SenderSteamId);IgnoreArmorPacket.UpdateIgnoreArmor(entityId);PriorityOnlyPacket.UpdatePriorityOnly(entityId);SubsystemPriorityPacket.UpdateSubsystemPriority(entityId);}public static void RequestSync(long entityID){SyncRequestPacket packet=new SyncRequestPacket{entityId=entityID,};HeartNetwork.I.SendToServer(packet);}}}
